{namespace RuleEditor}

/**
 * Prints the DDM rule settings.
 */
{template .render}
	{@param conditions: list<[
			operator: string,
			operands: list<[
				type: string,
				label: string,
				value: string
			]>
		]>
	}
	{@param firstOperandList : list<[
			value: string,
			type: string,
			name: string,
			options: list<[
				label: string,
				value: string
			]>
		]>
	}
	{@param logicalOperator: string}
	{@param readOnly: bool}
	{@param strings: ?}
	{@param? _handleFirstOperandSelection: any}
	{@param? _handleOperatorSelection: any}
	{@param? _handleSecondOperandSelection: any}
	{@param? _handleTypeSelection: any}
	{@param? operators:  list<[
			value: string,
			name: string,
			parameterTypes: list<string>,
			returnType: string
		]>
	}
	{@param? secondOperandTypeList: list<[
			value: string,
			name: string
		]>
	}
	{@param? secondOperandTypeSelectedList: list<[
			value: string,
			name: string
		]>
	}
	{@param? spritemap: string}

	<div class="form-builder-rule-builder">
		<h2 class="form-builder-section-title text-default">{$strings.title}</h2>
		<h4 class="text-default">{$strings.description}</h4>

		<ul class="liferay-ddm-form-builder-rule-condition-list liferay-ddm-form-rule-builder-timeline timeline {length($conditions) > 1 ? 'can-remove-item' : ''}">
			{let $enableLogicalOperator: (length($conditions) > 1) ? true : false /}

			{call .rulesHeader}
				{param extraContent kind="html"}
					{call .logicalOperatorDropDown}
						{param logicalOperator: $strings[$logicalOperator] /}
						{param strings: $strings /}
						{param enableLogicalOperator: $enableLogicalOperator /}
					{/call}
				{/param}
				{param logicalOperator: $strings[$logicalOperator] /}
				{param title: $strings.condition /}
			{/call}

			{foreach $condition in $conditions}
				{call .condition}
					{param _handleFirstOperandSelection: $_handleFirstOperandSelection /}
					{param _handleOperatorSelection: $_handleOperatorSelection /}
					{param _handleSecondOperandSelection: $_handleSecondOperandSelection /}
					{param _handleTypeSelection: $_handleTypeSelection /}
					{param firstOperandList: $firstOperandList /}
					{param firstOperandValueSelected: $condition.operands[0].value /}
					{param if: $strings.if /}
					{param index: index($condition) /}
					{param logicalOperator: $strings[$logicalOperator] /}
					{param operators: $operators /}
					{param operatorSelected: $condition.operator /}
					{param readOnly: $readOnly /}
					{param secondOperandTypeList: $secondOperandTypeList /}
					{param secondOperandTypeName: '' /}
					{param secondOperandTypeSelected: $condition.operands[0].type /}
					{param secondOperandTypeSelectedList: $secondOperandTypeSelectedList /}
					{param secondOperandTypeValue: isNonnull($condition.operands[1]) ? $condition.operands[1].value : '' /}
					{param spritemap: $spritemap /}
				{/call}

				{ifempty}
					{call .condition}
						{param _handleFirstOperandSelection: $_handleFirstOperandSelection /}
						{param _handleOperatorSelection: $_handleOperatorSelection /}
						{param _handleSecondOperandSelection: $_handleSecondOperandSelection /}
						{param _handleTypeSelection: $_handleTypeSelection /}
						{param firstOperandList: $firstOperandList /}
						{param if: $strings.if /}
						{param index: 0 /}
						{param logicalOperator: $strings[$logicalOperator] /}
						{param operators: $operators /}
						{param readOnly: $readOnly /}
						{param secondOperandTypeList: $secondOperandTypeList /}
						{param secondOperandTypeName: '' /}
						{param spritemap: $spritemap /}
					{/call}
			{/foreach}
		</ul>
	</div>
{/template}

{template .condition}
	{@param firstOperandList : list<[
			value: string,
			type: string,
			name: string,
			options: list<[
				label: string,
				value: string
			]>
		]>
	}
	{@param if: string}
	{@param index: int}
	{@param readOnly: bool}
	{@param? _handleFirstOperandSelection: any}
	{@param? _handleOperatorSelection: any}
	{@param? _handleSecondOperandSelection: any}
	{@param? _handleTypeSelection: any}
	{@param? firstOperandValueSelected: string}
	{@param? operators:  list<[
			value: string,
			name: string,
			parameterTypes: list<string>,
			returnType: string
		]>
	}
	{@param? operatorSelected: string}
	{@param? secondOperandTypeName: string }
	{@param? secondOperandTypeList : list<[
			value: string,
			name: string
		]>
	}
	{@param? secondOperandTypeSelectedList : list<[
			value: string,
			name: string
		]>
	}
	{@param? secondOperandTypeValue: any }
	{@param? spritemap: string}

	<li class="form-builder-rule-condition-container timeline-item" condition-index="{$index}">
		<div class="panel panel-default">
			<div class="flex-container panel-body">
				<div class="form-group-autofit">
					<div class="form-group-item form-group-item-label form-group-item-shrink">
						<h4>
							<span class="text-truncate-inline">
								<span class="text-truncate">{$if}</span>
							</span>
						</h4>
					</div>

					<div class="condition-if form-group-item" condition-if-index="{$index}">
						{delcall PageRenderer.RegisterFieldType variant="'select'"}
							{param events: [
								'fieldEdited': $_handleFirstOperandSelection
							] /}
							{param options: $firstOperandList /}
							{param ref: 'conditionIf' /}
							{param spritemap: $spritemap /}
							{param value: [$firstOperandValueSelected]   /}
						{/delcall}
					</div>

					{call .operators}
						{param _handleOperatorSelection: $_handleOperatorSelection /}
						{param index: $index /}
						{param operators: $operators /}
						{param operatorSelected: $operatorSelected /}
						{param spritemap: $spritemap /}
					{/call}

					{call .secondOperandTypeList}
						{param _handleTypeSelection: $_handleTypeSelection /}
						{param index: $index /}
						{param operatorSelected: $operatorSelected /}
						{param secondOperandTypeList: $secondOperandTypeList /}
						{param secondOperandTypeSelectedList: $secondOperandTypeSelectedList /}
						{param spritemap: $spritemap /}
					{/call}

					{if isNonnull($secondOperandTypeSelectedList) and isNonnull($secondOperandTypeSelectedList[$index])}
						{let $textFieldVisible: ($secondOperandTypeSelectedList[$index].name == 'text') ? true : false /}

						<div class="condition-type-value form-group-item {if not $textFieldVisible}hide{/if}" condition-type-value-index="{$index}">
							{delcall PageRenderer.RegisterFieldType variant="'text'"}
								{param events: [
									'fieldEdited': $_handleSecondOperandSelection
								] /}
								{param name: $secondOperandTypeName /}
								{param readOnly: $readOnly /}
								{param ref: 'typeValueInput' /}
								{param spritemap: $spritemap /}
								{param value: $secondOperandTypeValue /}
							{/delcall}
						</div>

						{let $selectFieldVisible: ($secondOperandTypeSelectedList[$index].name == 'field') ? true : false /}

						<div class="condition-type-value-select form-group-item {if not $selectFieldVisible}hide{/if}" condition-type-value-select-index="{$index}">
							{delcall PageRenderer.RegisterFieldType variant="'select'"}
								{param events: [
										'fieldEdited': $_handleSecondOperandSelection
									] /}
								{param options: $firstOperandList /}
								{param ref: 'typeValueSelect' /}
								{param spritemap: $spritemap /}
								{param value: [$secondOperandTypeValue] /}
							{/delcall}
						</div>

						{let $selectOptionsFieldVisible: ($secondOperandTypeSelectedList[$index].name == 'select') ? true : false /}

						{foreach $operand in $firstOperandList}
							{if $operand.value == $firstOperandValueSelected}
								<div class="condition-type-value-select-options form-group-item {if not $selectOptionsFieldVisible}hide{/if}" condition-type-value-select-options-index="{$index}">
									{delcall PageRenderer.RegisterFieldType variant="'select'"}
										{param events: [
												'fieldEdited': $_handleSecondOperandSelection
											] /}
										{param options: $operand.options /}
										{param ref: 'typeValueSelectOptions' /}
										{param spritemap: $spritemap /}
										{param value: [$secondOperandTypeValue] /}
									{/delcall}
								</div>
							{/if}
						{/foreach}
					{/if}
				</div>

				<div class="timeline-increment">
					<span class="timeline-icon"></span>
				</div>
			</div>
		</div>
	</li>
{/template}

{template .operators}
	{@param index: int}
	{@param? _handleOperatorSelection: any}
	{@param? operators:  list<[
			value: string,
			name: string,
			parameterTypes: list<string>,
			returnType: string
		]>
	}
	{@param? operatorSelected: string}
	{@param? spritemap: string}

	{let $readOnly: ($operators and length($operators) > 0) ? false : true /}

	<div class="condition-operator form-group-item" condition-operator-index="{$index}">
		{delcall PageRenderer.RegisterFieldType variant="'select'"}
			{param events: [
				'fieldEdited': $_handleOperatorSelection
			] /}
			{param options: $operators /}
			{param readOnly: $readOnly /}
			{param ref: 'conditionOperator' /}
			{param spritemap: $spritemap /}
			{param value: [$operatorSelected] /}
		{/delcall}
	</div>
{/template}

{template .secondOperandTypeList}
	{@param index: int}
	{@param? _handleTypeSelection: any}
	{@param? operatorSelected: any}
	{@param? secondOperandTypeList : list<[
			value: string,
			name: string
		]>
	}
	{@param? secondOperandTypeSelectedList : list<[
			value: string,
			name: string
		]>
	}
	{@param? spritemap: string}

	{let $visible: $operatorSelected and isNonnull($secondOperandTypeSelectedList) and isNonnull($secondOperandTypeSelectedList[$index]) ? true : false /}

	<div class="condition-type form-group-item {if not $visible}hide{/if}" condition-type-index="{$index}">
		{delcall PageRenderer.RegisterFieldType variant="'select'"}
			{param events: [
				'fieldEdited': $_handleTypeSelection
			] /}
			{param options: $secondOperandTypeList /}
			{param ref: 'type' /}
			{param spritemap: $spritemap /}
			{param value: [$visible ? $secondOperandTypeSelectedList?[$index].value : ''] /}
		{/delcall}
	</div>
{/template}

/**
 * Prints Logical Operator Dropdown
 */
{template .logicalOperatorDropDown}
	{@param strings: ?}
	{@param? enableLogicalOperator: bool}
	{@param? logicalOperator: string}

	{let $attributes kind="attributes"}
		class="btn btn-default dropdown-toggle dropdown-toggle-operator text-uppercase"
		data-toggle="dropdown"
		type="button"

		{if not $enableLogicalOperator}
			disabled
		{/if}
	{/let}

	<div class="btn-group dropdown" style="block">
		<button {$attributes}>
			<span class="dropdown-toggle-selected-value">{$logicalOperator}</span> <span class="caret"></span>
		</button>

		<ul class="dropdown-menu">
			<li class="logic-operator text-uppercase" data-logical-operator-value="or"><a href="#">{$strings['or']}</a></li>
			<li class="divider"></li>
			<li class="logic-operator text-uppercase" data-logical-operator-value="and"><a href="#">{$strings['and']}</a></li>
		</ul>
	</div>
{/template}

/**
 * Prints rules header.
 */
{template .rulesHeader}
	{@param title: string}
	{@param? extraContent: html}

	<li class="timeline-item">
		<div class="panel panel-default">
			<div class="flex-container panel-body">
				<div class="h4 panel-title">
					{$title}
				</div>

				{if $extraContent}
					{$extraContent}
				{/if}

				<div class="timeline-increment">
					<span class="timeline-icon"></span>
				</div>
			</div>
		</div>
	</li>
{/template}